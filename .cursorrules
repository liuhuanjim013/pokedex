# Pokemon Classifier Project Rules

## YOLO Training Rules

### Data Configuration
1. **YOLO Dataset Format Requirements**
   - Directory: `processed/yolo_dataset/`
   - Images: 416x416 JPEG in `images/{split}/`
   - Labels: YOLO format in `labels/{split}/`
   - Naming: `{pokemon_id}_{image_number:03d}.{ext}` (3-digit padding)
   - Class IDs: 0-based (0-1024)
   - Full-image boxes: "0.5 0.5 1.0 1.0"
   - Multiprocessing: 8 workers, 100 images per batch
   - Progress Tracking: Percentage complete per split
   - Lookup Tables: O(1) access for raw-to-processed mapping

2. **Dataset Verification**
   - Check Hugging Face access first
   - Verify YOLO config format
   - Validate class count (1025)
   - Check split names match
   - Verify per-Pokemon 70/15/15 splits
   - Validate label format and class IDs (0-based)
   - Check image sizes (416x416)
   - Verify image data types (bytes or PIL)
   - Skip already processed splits
   - Show progress with tqdm
   - Handle errors with descriptive messages
   - Update config paths dynamically

### Training Process
1. **Initialization Order**
   - Verify environment setup
   - Check dataset access
   - Initialize W&B tracking
   - Set up model explicitly

2. **Checkpoint Management**
   - Save metadata with checkpoints
   - Track W&B run ID
   - Record actual progress
   - Handle interruptions

### W&B Integration
1. **Configuration**
   - Use singleton pattern
   - Enable offline fallback
   - Disable code/git tracking
   - Use personal account

2. **Progress Tracking**
   - Save run ID with checkpoints
   - Track actual vs saved epochs
   - Handle mid-epoch crashes
   - Maintain step counting

3. **Resume Strategy**
   - Try specified checkpoint
   - Match W&B run ID
   - Fall back to latest
   - Support forcing new run

4. **Error Handling**
   - Clean up on failure
   - Proper exception handling
   - Informative messages
   - Resource cleanup

### Testing Requirements
1. **Training Tests**
   - Verify setup works
   - Check arguments
   - Test data loading
   - Validate progress

2. **W&B Tests**
   - Test initialization
   - Verify resumption
   - Check offline mode
   - Validate cleanup

3. **Checkpoint Tests**
   - Test metadata saving
   - Verify loading
   - Check progress tracking
   - Test interruption recovery

4. **Dataset Format Tests**
   - Verify image sizes (416x416)
   - Check label format
   - Validate class IDs (0-based)
   - Verify per-Pokemon splits
   - Test image-label pairs match