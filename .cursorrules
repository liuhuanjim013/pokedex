# Pokemon Classifier Project Rules

## Google Colab Training Environment

### Environment Setup
1. **Conda Installation (Ephemeral)**
   - Install to: `/content/miniconda3/` (reinstalled per session)
   - Environment: `pokemon-classifier` with Python 3.9
   - Activation: `source conda.sh && conda activate pokemon-classifier`
   - Shell script: `activate_env.sh` for easy activation
   - No Google Drive persistence due to file permission issues

2. **Dynamic Path Management**
   - Conda path detection: Check `/content/miniconda3/bin/conda` first
   - Function: `get_conda_path()` in multiple scripts
   - Primary path: `/content/miniconda3/bin/conda`
   - Fallback: PATH environment variable detection
   - PATH updates: Automatic conda binary detection

3. **Storage Strategy**
   - Repository: `/content/pokedex/pokedex/` for code and configs
   - Dataset: `/content/pokedex/pokedex/data/yolo_dataset/` from Hugging Face
   - Models: `/content/models/` directories (ephemeral)
   - Auto-creation: Required directories (`models/checkpoints`, etc.)
   - Error handling: I/O error retry logic for large file operations

## YOLO Training Rules

### Data Configuration
1. **YOLO Dataset Format Requirements**
   - Directory: `processed/yolo_dataset/`
   - Images: 416x416 JPEG in `images/{split}/`
   - Labels: YOLO format in `labels/{split}/`
   - Naming: `{pokemon_id}_{image_number:03d}.{ext}` (3-digit padding)
   - Class IDs: 0-based (0-1024)
   - Full-image boxes: "0.5 0.5 1.0 1.0"
   - Multiprocessing: 8 workers, 100 images per batch
   - Progress Tracking: Percentage complete per split
   - Lookup Tables: O(1) access for raw-to-processed mapping

2. **Dataset Verification**
   - Check Hugging Face access first
   - Verify YOLO config format
   - Validate class count (1025)
   - Check split names match
   - Verify per-Pokemon 70/15/15 splits
   - Validate label format and class IDs (0-based)
   - Check image sizes (416x416)
   - Verify image data types (bytes or PIL)
   - Skip already processed splits
   - Show progress with tqdm
   - Handle errors with descriptive messages
   - Update config paths dynamically

### Model Loading Strategy
1. **YOLOv3 Loading Priority**
   - **Primary**: Load official YOLOv3 weights (Ultralytics auto-download)
   - **Fallback**: Load from Ultralytics hub (`YOLO("yolov3")`)
   - YAML fallback removed (file `models/configs/yolov3.yaml` deleted)
   - **Cache Management**: Auto-cleanup corrupted weights
   - **Path Resolution**: Dynamic working directory detection

2. **Training Configuration**
   - Classes: 1025 (all Pokemon generations)
   - Input size: 416x416 pixels
   - Learning rate: 1e-4, cosine schedule with 5 warmup epochs

### Training Process
1. **Initialization Order**
   - Verify environment setup and conda activation
   - Check dataset access from Hugging Face
   - Initialize W&B tracking with run resumption
   - Set up model with fallback loading strategy
   - Create required directories automatically

2. **Checkpoint Management**
   - Save metadata with checkpoints (W&B run ID, epoch, metrics)
   - Track W&B run ID for resumption
   - Record actual progress vs saved epochs
   - Handle mid-epoch interruptions
    - Local storage (ephemeral per Colab session)
    - Auto-backup of training outputs to Google Drive every 30 minutes
    - Resume scans multiple default paths for latest checkpoint:
      - Custom checkpoints directory
      - `pokemon-classifier/<run-name>/weights`
      - `pokemon-yolo-training/<run-name>/weights`

3. **Error Handling**
   - File I/O errors: Retry with exponential backoff for large operations
   - Missing conda: Dynamic path detection and helpful messages
   - Model loading failures: Multiple fallback strategies
   - Dataset access: Hugging Face authentication and caching

### W&B Integration
1. **Configuration**
   - Use singleton pattern for initialization
   - Enable offline fallback with environment variables
   - Disable code/git tracking for Colab
   - Use personal account (liuhuanjim013-self)
   - Project: "pokemon-classifier"

2. **Metrics Logging**
   - **Built-in Ultralytics**: Automatic loss, mAP, precision, recall
   - **Real-time Monitoring**: Live training progress (callbacks on epoch/val end)
   - **System Metrics**: GPU usage, memory consumption
   - **Custom Logging**: Configuration parameters and experiment metadata
   - **Run Persistence**: Save run ID to disk for resumption

3. **Resume Strategy**
   - Try specified checkpoint with matching W&B run ID
   - Match W&B run ID from saved checkpoint metadata
   - Fall back to latest checkpoint if run ID missing
   - Support forcing new run with --force-new-run flag
   - Maintain metrics continuity during resume

4. **Error Handling**
   - Clean up W&B runs on training failure
   - Proper exception handling with informative messages
   - Resource cleanup and session management
   - Offline mode fallback for network issues

### Testing Requirements
1. **Training Tests**
   - Verify setup works
   - Check arguments
   - Test data loading
   - Validate progress

2. **W&B Tests**
   - Test initialization
   - Verify resumption
   - Check offline mode
   - Validate cleanup

3. **Checkpoint Tests**
   - Test metadata saving
   - Verify loading
   - Check progress tracking
   - Test interruption recovery

4. **Dataset Format Tests**
   - Verify image sizes (416x416)
   - Check label format
   - Validate class IDs (0-based)
   - Verify per-Pokemon splits
   - Test image-label pairs match