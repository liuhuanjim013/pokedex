# generated by maixhub, tested on maixpy v0.6.0_2_g9720594
# copy files to TF card and plug into board and power on

import sensor, image, lcd
import KPU as kpu
import gc,sys
from machine import UART,Timer
from fpioa_manager import fm
from Maix import FPIOA,GPIO,I2S,utils
import audio
import utime

time_flag=True
invert_flag=True

#def lcd_show_except(e):
    #import uio
    #err_str = uio.StringIO()
    #sys.print_exception(e, err_str)
    #err_str = err_str.getvalue()
    #img = image.Image(size=input_size)
    #img.draw_string(0, 10, err_str, scale=1, color=(0xff,0x00,0x00))
    #lcd.display(img)

class Comm:
    def __init__(self, uart):
        self.uart = uart

    def send_classify_result(self, pmax, idx, label):
        msg = "{}:{:.2f}:{}\n".format(idx, pmax, label)
        self.uart.write(msg.encode())

def init_uart():
    fm.register(34, fm.fpioa.I2S0_OUT_D1, force=True)
    fm.register(35, fm.fpioa.I2S0_SCLK, force=True)
    fm.register(33, fm.fpioa.I2S0_WS, force=True)

    fm.register(15, fm.fpioa.GPIOHS0, force=True)
    fm.register(6, fm.fpioa.GPIOHS1, force=True)
    fm.register(7, fm.fpioa.GPIOHS2, force=True)
    fm.register(8, fm.fpioa.GPIOHS3, force=True)
    fm.register(9, fm.fpioa.GPIOHS4, force=True)

    uart = UART(UART.UART1, 115200, 8, 0, 0, timeout=1000, read_buf_len=256)
    return uart

def draw_rounded_rectangle(img, x, y, w, h, r, color, thickness=1):
    img.draw_line(x + r, y, x + w - r - 1, y, color=color, thickness=thickness)  # Top
    img.draw_line(x + r, y + h - 1, x + w - r - 1, y + h - 1, color=color, thickness=thickness)  # Bottom
    img.draw_line(x, y + r, x, y + h - r - 1, color=color, thickness=thickness)  # Left
    img.draw_line(x + w - 1, y + r, x + w - 1, y + h - r - 1, color=color, thickness=thickness)  # Right

def invert_color(timer):
    global invert_flag
    invert_flag=True

def call_timer(timer):
    global time_flag
    time_flag=True

def main(lcd_rotation=0):
    global time_flag
    global invert_flag
    input_size = (224, 224)

    sensor.reset()
    sensor.set_pixformat(sensor.RGB565)
    sensor.set_framesize(sensor.QVGA)
    sensor.set_auto_exposure(1)                                # 设置自动曝光
    #sensor.set_auto_exposure(0, exposure=120000)               # 设置手动曝光 曝光时间 120000 us
    sensor.set_auto_gain(0, gain_db = 17)                      # 设置画面增益 17 dB 影响实时画面亮度
    sensor.set_auto_whitebal(0, rgb_gain_db = (10,10,0))         # 设置RGB增益 0 0 0 dB 影响画面色彩呈现效果 在 K210 上无法调节增益 初步判定是感光元件 ov2640 无法支持
    sensor.set_contrast(2)                                     # 设置对比度 0 这个参数无法读取 且调这个参数对画面似乎不会产生影响 暂时注释
    sensor.set_brightness(2)                                   # 设置亮度 0 这个参数无法读取 且调这个参数对画面似乎不会产生影响 暂时注释
    sensor.set_saturation(1)                                   # 设置饱和度 0 这个参数无法读取 且调这个参数对画面似乎不会产生影响 暂时注释
    sensor.set_windowing(input_size)
    sensor.set_hmirror(1)
    sensor.set_vflip(1)
    sensor.skip_frames(time =1000)                            # 延时跳过2s 等待感光元件稳定
    sensor.run(1)

    lcd.init()
    lcd.rotation(lcd_rotation)
    lcd.clear()

    canvas1 = image.Image(size=(320, 240))
    canvas2 = image.Image(size=(95, 20))
    canvas3 = image.Image(size=(95, 20))
    canvas4 = image.Image(size=(100,116))


    labels=['abra', 'aerodactyl', 'alakazam', 'arbok', 'arcanine', 'articuno', 'beedrill', 'bellsprout', 'blastoise', 'bulbasaur', 'butterfree', 'caterpie', 'chansey', 'charizard', 'charmander', 'charmeleon', 'clefable', 'clefairy', 'cloyster', 'cubone', 'dewgong', 'diglett', 'ditto', 'dodrio', 'doduo', 'dragonair', 'dragonite', 'dratini', 'drowzee', 'dugtrio', 'eevee', 'ekans', 'electabuzz', 'electrode', 'exeggcute', 'exeggutor', 'farfetchd', 'fearow', 'flareon', 'gastly', 'gengar', 'geodude', 'gloom', 'golbat', 'goldeen', 'golduck', 'golem', 'graveler', 'grimer', 'growlithe', 'gyarados', 'haunter', 'hitmonchan', 'hitmonlee', 'horsea', 'hypno', 'ivysaur', 'jigglypuff', 'jolteon', 'jynx', 'kabuto', 'kabutops', 'kadabra', 'kakuna', 'kangaskhan', 'kingler', 'koffing', 'krabby', 'lapras', 'lickitung', 'machamp', 'machoke', 'machop', 'magikarp', 'magmar', 'magnemite', 'magneton', 'mankey', 'marowak', 'meowth', 'metapod', 'mew', 'mewtwo', 'moltres', 'mr-mime', 'muk', 'nidoking', 'nidoqueen', 'nidoran-f', 'nidoran-m', 'nidorina', 'nidorino', 'ninetales', 'oddish', 'omanyte', 'omastar', 'onix', 'paras', 'parasect', 'persian', 'pidgeot', 'pidgeotto', 'pidgey', 'pikachu', 'pinsir', 'poliwag', 'poliwhirl', 'poliwrath', 'ponyta', 'porygon', 'primeape', 'psyduck', 'raichu', 'rapidash', 'raticate', 'rattata', 'rhydon', 'rhyhorn', 'sandshrew', 'sandslash', 'scyther', 'seadra', 'seaking', 'seel', 'shellder', 'slowbro', 'slowpoke', 'snorlax', 'spearow', 'squirtle', 'starmie', 'staryu', 'tangela', 'tauros', 'tentacool', 'tentacruel', 'vaporeon', 'venomoth', 'venonat', 'venusaur', 'victreebel', 'vileplume', 'voltorb', 'vulpix', 'wartortle', 'weedle', 'weepinbell', 'weezing', 'wigglytuff', 'zapdos', 'zubat']
    pokemon_linkname=['bulbasaur', 'ivysaur', 'venusaur', 'charmander', 'charmeleon', 'charizard', 'squirtle', 'wartortle', 'blastoise', 'caterpie', 'metapod', 'butterfree', 'weedle', 'kakuna', 'beedrill', 'pidgey', 'pidgeotto', 'pidgeot', 'rattata', 'raticate', 'spearow', 'fearow', 'ekans', 'arbok', 'pikachu', 'raichu', 'sandshrew', 'sandslash', 'nidoran-f', 'nidorina', 'nidoqueen', 'nidoran-m', 'nidorino', 'nidoking', 'clefairy', 'clefable', 'vulpix', 'ninetales', 'jigglypuff', 'wigglytuff', 'zubat', 'golbat', 'oddish', 'gloom', 'vileplume', 'paras', 'parasect', 'venonat', 'venomoth', 'diglett', 'dugtrio', 'meowth', 'persian', 'psyduck', 'golduck', 'mankey', 'primeape', 'growlithe', 'arcanine', 'poliwag', 'poliwhirl', 'poliwrath', 'abra', 'kadabra', 'alakazam', 'machop', 'machoke', 'machamp', 'bellsprout', 'weepinbell', 'victreebel', 'tentacool', 'tentacruel', 'geodude', 'graveler', 'golem', 'ponyta', 'rapidash', 'slowpoke', 'slowbro', 'magnemite', 'magneton', 'farfetchd', 'doduo', 'dodrio', 'seel', 'dewgong', 'grimer', 'muk', 'shellder', 'cloyster', 'gastly', 'haunter', 'gengar', 'onix', 'drowzee', 'hypno', 'krabby', 'kingler', 'voltorb', 'electrode', 'exeggcute', 'exeggutor', 'cubone', 'marowak', 'hitmonlee', 'hitmonchan', 'lickitung', 'koffing', 'weezing', 'rhyhorn', 'rhydon', 'chansey', 'tangela', 'kangaskhan', 'horsea', 'seadra', 'goldeen', 'seaking', 'staryu', 'starmie', 'mr-mime', 'scyther', 'jynx', 'electabuzz', 'magmar', 'pinsir', 'tauros', 'magikarp', 'gyarados', 'lapras', 'ditto', 'eevee', 'vaporeon', 'jolteon', 'flareon', 'porygon', 'omanyte', 'omastar', 'kabuto', 'kabutops', 'aerodactyl', 'snorlax', 'articuno', 'zapdos', 'moltres', 'dratini', 'dragonair', 'dragonite', 'mewtwo', 'mew', 'chikorita', 'bayleef', 'meganium', 'cyndaquil', 'quilava', 'typhlosion', 'totodile', 'croconaw', 'feraligatr', 'sentret', 'furret', 'hoothoot', 'noctowl', 'ledyba', 'ledian', 'spinarak', 'ariados', 'crobat', 'chinchou', 'lanturn', 'pichu', 'cleffa', 'igglybuff', 'togepi', 'togetic', 'natu', 'xatu', 'mareep', 'flaaffy', 'ampharos', 'bellossom', 'marill', 'azumarill', 'sudowoodo', 'politoed', 'hoppip', 'skiploom', 'jumpluff', 'aipom', 'sunkern', 'sunflora', 'yanma', 'wooper', 'quagsire', 'espeon', 'umbreon', 'murkrow', 'slowking', 'misdreavus', 'unown', 'wobbuffet', 'girafarig', 'pineco', 'forretress', 'dunsparce', 'gligar', 'steelix', 'snubbull', 'granbull', 'qwilfish', 'scizor', 'shuckle', 'heracross', 'sneasel', 'teddiursa', 'ursaring', 'slugma', 'magcargo', 'swinub', 'piloswine', 'corsola', 'remoraid', 'octillery', 'delibird', 'mantine', 'skarmory', 'houndour', 'houndoom', 'kingdra', 'phanpy', 'donphan', 'porygon2', 'stantler', 'smeargle', 'tyrogue', 'hitmontop', 'smoochum', 'elekid', 'magby', 'miltank', 'blissey', 'raikou', 'entei', 'suicune', 'larvitar', 'pupitar', 'tyranitar', 'lugia', 'ho-oh', 'celebi', 'treecko', 'grovyle', 'sceptile', 'torchic', 'combusken', 'blaziken', 'mudkip', 'marshtomp', 'swampert', 'poochyena', 'mightyena', 'zigzagoon', 'linoone', 'wurmple', 'silcoon', 'beautifly', 'cascoon', 'dustox', 'lotad', 'lombre', 'ludicolo', 'seedot', 'nuzleaf', 'shiftry', 'taillow', 'swellow', 'wingull', 'pelipper', 'ralts', 'kirlia', 'gardevoir', 'surskit', 'masquerain', 'shroomish', 'breloom', 'slakoth', 'vigoroth', 'slaking', 'nincada', 'ninjask', 'shedinja', 'whismur', 'loudred', 'exploud', 'makuhita', 'hariyama', 'azurill', 'nosepass', 'skitty', 'delcatty', 'sableye', 'mawile', 'aron', 'lairon', 'aggron', 'meditite', 'medicham', 'electrike', 'manectric', 'plusle', 'minun', 'volbeat', 'illumise', 'roselia', 'gulpin', 'swalot', 'carvanha', 'sharpedo', 'wailmer', 'wailord', 'numel', 'camerupt', 'torkoal', 'spoink', 'grumpig', 'spinda', 'trapinch', 'vibrava', 'flygon', 'cacnea', 'cacturne', 'swablu', 'altaria', 'zangoose', 'seviper', 'lunatone', 'solrock', 'barboach', 'whiscash', 'corphish', 'crawdaunt', 'baltoy', 'claydol', 'lileep', 'cradily', 'anorith', 'armaldo', 'feebas', 'milotic', 'castform', 'kecleon', 'shuppet', 'banette', 'duskull', 'dusclops', 'tropius', 'chimecho', 'absol', 'wynaut', 'snorunt', 'glalie', 'spheal', 'sealeo', 'walrein', 'clamperl', 'huntail', 'gorebyss', 'relicanth', 'luvdisc', 'bagon', 'shelgon', 'salamence', 'beldum', 'metang', 'metagross', 'regirock', 'regice', 'registeel', 'latias', 'latios', 'kyogre', 'groudon', 'rayquaza', 'jirachi', 'deoxys', 'turtwig', 'grotle', 'torterra', 'chimchar', 'monferno', 'infernape', 'piplup', 'prinplup', 'empoleon', 'starly', 'staravia', 'staraptor', 'bidoof', 'bibarel', 'kricketot', 'kricketune', 'shinx', 'luxio', 'luxray', 'budew', 'roserade', 'cranidos', 'rampardos', 'shieldon', 'bastiodon', 'burmy', 'wormadam', 'mothim', 'combee', 'vespiquen', 'pachirisu', 'buizel', 'floatzel', 'cherubi', 'cherrim', 'shellos', 'gastrodon', 'ambipom', 'drifloon', 'drifblim', 'buneary', 'lopunny', 'mismagius', 'honchkrow', 'glameow', 'purugly', 'chingling', 'stunky', 'skuntank', 'bronzor', 'bronzong', 'bonsly', 'mime-jr', 'happiny', 'chatot', 'spiritomb', 'gible', 'gabite', 'garchomp', 'munchlax', 'riolu', 'lucario', 'hippopotas', 'hippowdon', 'skorupi', 'drapion', 'croagunk', 'toxicroak', 'carnivine', 'finneon', 'lumineon', 'mantyke', 'snover', 'abomasnow', 'weavile', 'magnezone', 'lickilicky', 'rhyperior', 'tangrowth', 'electivire', 'magmortar', 'togekiss', 'yanmega', 'leafeon', 'glaceon', 'gliscor', 'mamoswine', 'porygon-z', 'gallade', 'probopass', 'dusknoir', 'froslass', 'rotom', 'uxie', 'mesprit', 'azelf', 'dialga', 'palkia', 'heatran', 'regigigas', 'giratina', 'cresselia', 'phione', 'manaphy', 'darkrai', 'shaymin', 'arceus', 'victini', 'snivy', 'servine', 'serperior', 'tepig', 'pignite', 'emboar', 'oshawott', 'dewott', 'samurott', 'patrat', 'watchog', 'lillipup', 'herdier', 'stoutland', 'purrloin', 'liepard', 'pansage', 'simisage', 'pansear', 'simisear', 'panpour', 'simipour', 'munna', 'musharna', 'pidove', 'tranquill', 'unfezant', 'blitzle', 'zebstrika', 'roggenrola', 'boldore', 'gigalith', 'woobat', 'swoobat', 'drilbur', 'excadrill', 'audino', 'timburr', 'gurdurr', 'conkeldurr', 'tympole', 'palpitoad', 'seismitoad', 'throh', 'sawk', 'sewaddle', 'swadloon', 'leavanny', 'venipede', 'whirlipede', 'scolipede', 'cottonee', 'whimsicott', 'petilil', 'lilligant', 'basculin', 'sandile', 'krokorok', 'krookodile', 'darumaka', 'darmanitan', 'maractus', 'dwebble', 'crustle', 'scraggy', 'scrafty', 'sigilyph', 'yamask', 'cofagrigus', 'tirtouga', 'carracosta', 'archen', 'archeops', 'trubbish', 'garbodor', 'zorua', 'zoroark', 'minccino', 'cinccino', 'gothita', 'gothorita', 'gothitelle', 'solosis', 'duosion', 'reuniclus', 'ducklett', 'swanna', 'vanillite', 'vanillish', 'vanilluxe', 'deerling', 'sawsbuck', 'emolga', 'karrablast', 'escavalier', 'foongus', 'amoonguss', 'frillish', 'jellicent', 'alomomola', 'joltik', 'galvantula', 'ferroseed', 'ferrothorn', 'klink', 'klang', 'klinklang', 'tynamo', 'eelektrik', 'eelektross', 'elgyem', 'beheeyem', 'litwick', 'lampent', 'chandelure', 'axew', 'fraxure', 'haxorus', 'cubchoo', 'beartic', 'cryogonal', 'shelmet', 'accelgor', 'stunfisk', 'mienfoo', 'mienshao', 'druddigon', 'golett', 'golurk', 'pawniard', 'bisharp', 'bouffalant', 'rufflet', 'braviary', 'vullaby', 'mandibuzz', 'heatmor', 'durant', 'deino', 'zweilous', 'hydreigon', 'larvesta', 'volcarona', 'cobalion', 'terrakion', 'virizion', 'tornadus', 'thundurus', 'reshiram', 'zekrom', 'landorus', 'kyurem', 'keldeo', 'meloetta', 'genesect', 'chespin', 'quilladin', 'chesnaught', 'fennekin', 'braixen', 'delphox', 'froakie', 'frogadier', 'greninja', 'bunnelby', 'diggersby', 'fletchling', 'fletchinder', 'talonflame', 'scatterbug', 'spewpa', 'vivillon', 'litleo', 'pyroar', 'flabebe', 'floette', 'florges', 'skiddo', 'gogoat', 'pancham', 'pangoro', 'furfrou', 'espurr', 'meowstic', 'honedge', 'doublade', 'aegislash', 'spritzee', 'aromatisse', 'swirlix', 'slurpuff', 'inkay', 'malamar', 'binacle', 'barbaracle', 'skrelp', 'dragalge', 'clauncher', 'clawitzer', 'helioptile', 'heliolisk', 'tyrunt', 'tyrantrum', 'amaura', 'aurorus', 'sylveon', 'hawlucha', 'dedenne', 'carbink', 'goomy', 'sliggoo', 'goodra', 'klefki', 'phantump', 'trevenant', 'pumpkaboo', 'gourgeist', 'bergmite', 'avalugg', 'noibat', 'noivern', 'xerneas', 'yveltal', 'zygarde', 'diancie', 'hoopa', 'volcanion', 'rowlet', 'dartrix', 'decidueye', 'litten', 'torracat', 'incineroar', 'popplio', 'brionne', 'primarina', 'pikipek', 'trumbeak', 'toucannon', 'yungoos', 'gumshoos', 'grubbin', 'charjabug', 'vikavolt', 'crabrawler', 'crabominable', 'oricorio', 'cutiefly', 'ribombee', 'rockruff', 'lycanroc', 'wishiwashi', 'mareanie', 'toxapex', 'mudbray', 'mudsdale', 'dewpider', 'araquanid', 'fomantis', 'lurantis', 'morelull', 'shiinotic', 'salandit', 'salazzle', 'stufful', 'bewear', 'bounsweet', 'steenee', 'tsareena', 'comfey', 'oranguru', 'passimian', 'wimpod', 'golisopod', 'sandygast', 'palossand', 'pyukumuku', 'type-null', 'silvally', 'minior', 'komala', 'turtonator', 'togedemaru', 'mimikyu', 'bruxish', 'drampa', 'dhelmise', 'jangmo-o', 'hakamo-o', 'kommo-o', 'tapu-koko', 'tapu-lele', 'tapu-bulu', 'tapu-fini', 'cosmog', 'cosmoem', 'solgaleo', 'lunala', 'nihilego', 'buzzwole', 'pheromosa', 'xurkitree', 'celesteela', 'kartana', 'guzzlord', 'necrozma', 'magearna', 'marshadow', 'poipole', 'naganadel', 'stakataka', 'blacephalon', 'zeraora', 'meltan', 'melmetal', 'grookey', 'thwackey', 'rillaboom', 'scorbunny', 'raboot', 'cinderace', 'sobble', 'drizzile', 'inteleon', 'skwovet', 'greedent', 'rookidee', 'corvisquire', 'corviknight', 'blipbug', 'dottler', 'orbeetle', 'nickit', 'thievul', 'gossifleur', 'eldegoss', 'wooloo', 'dubwool', 'chewtle', 'drednaw', 'yamper', 'boltund', 'rolycoly', 'carkol', 'coalossal', 'applin', 'flapple', 'appletun', 'silicobra', 'sandaconda', 'cramorant', 'arrokuda', 'barraskewda', 'toxel', 'toxtricity', 'sizzlipede', 'centiskorch', 'clobbopus', 'grapploct', 'sinistea', 'polteageist', 'hatenna', 'hattrem', 'hatterene', 'impidimp', 'morgrem', 'grimmsnarl', 'obstagoon', 'perrserker', 'cursola', 'sirfetchd', 'mr-rime', 'runerigus', 'milcery', 'alcremie', 'falinks', 'pincurchin', 'snom', 'frosmoth', 'stonjourner', 'eiscue', 'indeedee', 'morpeko', 'cufant', 'copperajah', 'dracozolt', 'arctozolt', 'dracovish', 'arctovish', 'duraludon', 'dreepy', 'drakloak', 'dragapult', 'zacian', 'zamazenta', 'eternatus', 'kubfu', 'urshifu', 'zarude', 'regieleki', 'regidrago', 'glastrier', 'spectrier', 'calyrex', 'wyrdeer', 'kleavor', 'ursaluna', 'basculegion', 'sneasler', 'overqwil', 'enamorus', 'sprigatito', 'floragato', 'meowscarada', 'fuecoco', 'crocalor', 'skeledirge', 'quaxly', 'quaxwell', 'quaquaval', 'lechonk', 'oinkologne', 'tarountula', 'spidops', 'nymble', 'lokix', 'pawmi', 'pawmo', 'pawmot', 'tandemaus', 'maushold', 'fidough', 'dachsbun', 'smoliv', 'dolliv', 'arboliva', 'squawkabilly', 'nacli', 'naclstack', 'garganacl', 'charcadet', 'armarouge', 'ceruledge', 'tadbulb', 'bellibolt', 'wattrel', 'kilowattrel', 'maschiff', 'mabosstiff', 'shroodle', 'grafaiai', 'bramblin', 'brambleghast', 'toedscool', 'toedscruel', 'klawf', 'capsakid', 'scovillain', 'rellor', 'rabsca', 'flittle', 'espathra', 'tinkatink', 'tinkatuff', 'tinkaton', 'wiglett', 'wugtrio', 'bombirdier', 'finizen', 'palafin', 'varoom', 'revavroom', 'cyclizar', 'orthworm', 'glimmet', 'glimmora', 'greavard', 'houndstone', 'flamigo', 'cetoddle', 'cetitan', 'veluza', 'dondozo', 'tatsugiri', 'annihilape', 'clodsire', 'farigiraf', 'dudunsparce', 'kingambit', 'great-tusk', 'scream-tail', 'brute-bonnet', 'flutter-mane', 'slither-wing', 'sandy-shocks', 'iron-treads', 'iron-bundle', 'iron-hands', 'iron-jugulis', 'iron-moth', 'iron-thorns', 'frigibax', 'arctibax', 'baxcalibur', 'gimmighoul', 'gholdengo', 'wo-chien', 'chien-pao', 'ting-lu', 'chi-yu', 'roaring-moon', 'iron-valiant', 'koraidon', 'miraidon', 'walking-wake', 'iron-leaves', 'dipplin', 'poltchageist', 'sinistcha', 'okidogi', 'munkidori', 'fezandipiti', 'ogerpon', 'archaludon', 'hydrapple', 'gouging-fire', 'raging-bolt', 'iron-boulder', 'iron-crown', 'terapagos', 'pecharunt']
    colors=[('红色',243,82,82),('蓝色',148,219,238),('绿色',170,209,94),('黄色',255,255,153),('紫色',197,150,189),('粉红色',255,221,255),('褐色',204,153,102),('黑色',187,187,187),('灰色',238,238,238),('白色',255,255,255)]
    values=[('一般',187,187,170),('格斗',187,85,68),('飞行',129,185,199),('毒',170,85,153),('地面',221,187,85),('岩石',187,170,102),('虫',170,187,34),('幽灵',142,142,187),('钢',170,170,187),('火',255,68,34),('水',51,153,255),('草',119,204,85),('电',255,204,51),('超能力',255,85,153),('冰',119,221,245),('龙',179,102,238),('恶',119,85,68),('妖精',255,170,255)]


    uart = init_uart()
    comm = Comm(uart)

    tim = Timer(Timer.TIMER0, Timer.CHANNEL0, mode=Timer.MODE_PERIODIC, period=50,
              unit=Timer.UNIT_MS, callback=call_timer, arg=call_timer, start=False, priority=1, div=0)

    draw_tim=Timer(Timer.TIMER1, Timer.CHANNEL1, mode=Timer.MODE_PERIODIC, period=500,
                unit=Timer.UNIT_MS, callback=invert_color, arg=invert_color, start=False, priority=1, div=0)

    try:
        task = None

        key = GPIO(GPIO.GPIOHS0,GPIO.IN,GPIO.PULL_UP)
        key1 = GPIO(GPIO.GPIOHS1,GPIO.IN,GPIO.PULL_UP)
        key4 = GPIO(GPIO.GPIOHS4,GPIO.IN,GPIO.PULL_UP)
        key2 = GPIO(GPIO.GPIOHS2,GPIO.IN,GPIO.PULL_UP)
        key3 = GPIO(GPIO.GPIOHS3,GPIO.IN,GPIO.PULL_UP)
        
        # Boot button (IO16)
        fm.register(16, fm.fpioa.GPIOHS5, force=True)
        boot_key = GPIO(GPIO.GPIOHS5,GPIO.IN,GPIO.PULL_UP)

        flag=-1
        special_alpha=256
        special_flag1=0
        special_flag2=0
        alpha_direct=1
        current_frame = 0
        read_flag0=0
        read_init_flag0=0
        read_flag1=0
        read_init_flag1=0
        read_flag2=0
        read_init_flag2=0
        bgm_flag=0
        change_flag1=0
        change_flag2=0
        linkname=''
        gen=0
        gif_flag=0
        x=''
        random_flag=0
        form_flag=0
        form_show_flag=0
        form_num=0
        #menu_draw_flag=True
        menu_collect=1
        chosen_color=0
        key_chosen_flag=True
        key_chosen=20
        input_text = ""
        pinyin_res_count=0
        choose_flag=0
        choose_pokemon=0
        cry_num=0

        draw_tim.start()

        last_key_state=0
        last_key_state1=0
        last_key_state2=0
        last_key_state3=0
        last_key_state4=0
        last_boot_state=0

        while(True):

            current_key_state = key.value()
            current_key_state1 = key1.value()
            current_key_state4 = key4.value()
            current_key_state2 = key2.value()
            current_key_state3 = key3.value()
            current_boot_state = boot_key.value()

            if flag==-1 and invert_flag and change_flag1==0 and change_flag2==0 and random_flag==0 and form_flag==0 and choose_flag==0:
                canvas1.clear()
                gc.collect()
                utime.sleep_ms(50)
                invert_flag=False

                # 绘制图像
                gc.collect()
                #img_pokedex = image.Image("/sd/pokedex.jpg")
                #canvas1.draw_image(img_pokedex, 100, 60, 1, 1, alpha=256)
                #del img_pokedex
                #gc.collect()
                canvas1.draw_string(95, 25, "K210 POKEDEX", color=(255, 255, 255), scale=2)
                #canvas1.draw_string(60, 190, "Let's detect pokemon now!", color=(255, 255, 255), scale=1.5)
                canvas1.draw_string(110, 220, "developed by masaya", color=(200, 200, 200), scale=1)

                chosen_color=255-chosen_color

                if menu_collect==1:
                    canvas1.draw_rectangle(91 , 188, 58, 18, color=(chosen_color, chosen_color, chosen_color), fill=True)  # Top and bottom
                    canvas1.draw_string(99, 190, "Detect", color=(255-chosen_color, 255-chosen_color, 255-chosen_color), scale=1.25)
                    draw_rounded_rectangle(canvas1, 90, 187, 60, 20, 2, (255, 255, 255), thickness=1)
                    draw_rounded_rectangle(canvas1, 170, 187, 60, 20, 2, (255, 255, 255), thickness=1)
                    canvas1.draw_string(179, 190,"Browse", color=(255, 255, 255), scale=1.25)
                elif menu_collect==2:
                    draw_rounded_rectangle(canvas1, 90, 187, 60, 20, 2, (255, 255, 255), thickness=1)
                    draw_rounded_rectangle(canvas1, 170, 187, 60, 20, 2, (255, 255, 255), thickness=1)
                    canvas1.draw_string(99, 190, "Detect", color=(255, 255, 255), scale=1.25)
                    canvas1.draw_rectangle(171 , 188, 58, 18, color=(chosen_color, chosen_color, chosen_color), fill=True)  # Top and bottom
                    canvas1.draw_string(179, 190,"Browse", color=(255-chosen_color, 255-chosen_color, 255-chosen_color), scale=1.25)

                lcd.display(canvas1)

            if flag==-2 and key_chosen_flag:
                key_chosen_flag=False
                canvas1.clear()

                #绘制输入框
                canvas1.draw_rectangle(60, 10, 200, 20, color=(255, 255, 255))
                canvas1.draw_string(15, 15, "Input: ", color=(255, 255, 255), scale=1.25)
                canvas1.draw_string(70, 15, input_text,color=(255, 255, 255), scale=1.25)

                if len(input_text)==5:
                    canvas1.draw_string(180, 18, "(max 5 letters)", color=(255, 255, 255), scale=1)

                # QWERTY键盘布局
                keys = [
                    "QWERTYUIOP",
                    "ASDFGHJKL",
                    "ZXCVBNM"
                ]

                key_width = 20
                key_height = 20
                margin = 5

                count=0
                for row, key_row in enumerate(keys):
                    for col, keykey in enumerate(key_row):
                        if count!=19:
                            count+=1
                        else:
                            count+=2

                        x = col * (key_width + margin) + 20 + row*10
                        y = row * (key_height + margin) + 170
                        if key_chosen==count:
                            canvas1.draw_rectangle(x, y, key_width, key_height, color=(255, 255, 255),fill=True)
                            canvas1.draw_string(x + 5, y + 5, keykey, color=(0, 0, 0), scale=1)
                        else:
                            canvas1.draw_rectangle(x, y, key_width, key_height, color=(255, 255, 255))
                            canvas1.draw_string(x + 5, y + 5, keykey, color=(255, 255, 255), scale=1)
                del keys
                gc.collect()

                if key_chosen==28:
                    canvas1.draw_rectangle(215, 220, 80, key_height, color=(255, 255, 255),fill=True)
                    canvas1.draw_string(220, 225, "<- Backspace", color=(0, 0, 0), scale=1)
                else:
                    canvas1.draw_rectangle(215, 220, 80, key_height, color=(255, 255, 255))
                    canvas1.draw_string(220, 225, "<- Backspace", color=(255, 255, 255), scale=1)

                if key_chosen==20:
                    canvas1.draw_rectangle(255, 195, 45, key_height, color=(255, 255, 255),fill=True)
                    canvas1.draw_string(260, 200, "Random", color=(0, 0, 0), scale=1)
                else:
                    canvas1.draw_rectangle(255, 195, 45, key_height, color=(255, 255, 255))
                    canvas1.draw_string(260, 200, "Random", color=(255, 255, 255), scale=1)

                with open("/sd/pinyin.txt", "r",encoding='utf-8') as f:
                    pinyin_list = eval(f.read())

                pinyin_results=[]
                for i,pinyin in enumerate(pinyin_list):
                    if pinyin.startswith(input_text):
                        pinyin_results.append(i)

                result_num=len(pinyin_results)

                if result_num<10:
                    for i,pinyin in enumerate(pinyin_list):
                        if not pinyin.startswith(input_text) and input_text in pinyin:
                            pinyin_results.append(i)

                del pinyin_list
                gc.collect()

                pinyin_res_count=len(pinyin_results[:10])

                count=0
                for i,res in enumerate(pinyin_results[:10]):
                    pinyin_pokename=pokemon_linkname[res]
                    kkk=res+1
                    xxxxx=str(kkk)
                    xxxxx='0'*(4-len(xxxxx))+xxxxx

                    if kkk<=151:
                        gen=1
                    elif kkk<=251:
                        gen=2
                    elif kkk<=386:
                        gen=3
                    elif kkk<=493:
                        gen=4
                    elif kkk<=649:
                        gen=5
                    elif kkk<=721:
                        gen=6
                    elif kkk<=809:
                        gen=7
                    elif kkk<=905:
                        gen=8
                    else:
                        gen=9

                    file_path="/sd/gen"+str(gen)+"/"+xxxxx+pinyin_pokename+"/inform.txt"

                    with open(file_path, "r",encoding='utf-8') as f:
                        data = f.readlines()
                        pokename=eval(data[0])
                        attributes=eval(data[1])

                    del data
                    gc.collect()

                    count-=1
                    if key_chosen==count:
                        choose_pokemon=res
                        num_color=(0,0,0)
                        if i+1<=result_num:
                            rec_color=(255,255,255)
                        else:
                            rec_color=(200,200,200)
                        if i<=4:
                            canvas1.draw_rectangle(10, 36+i*27, 140, 20, color=rec_color,fill=True)
                        else:
                            canvas1.draw_rectangle(170, 36+(i-5)*27, 140, 20, color=rec_color,fill=True)
                    else:
                        if i+1<=result_num:
                            num_color=(255,255,255)
                        else:
                            num_color=(200,200,200)

                    if i<=4:
                        #canvas1.draw_rectangle(20, 185, 45, 20, color=(255, 255, 255),fill=True)
                        canvas1.draw_string(15, 41+i*27, pokename[0], color=num_color, scale=1)
                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                        canvas1.draw_string(55, 38+i*27, pokename[1].encode('utf-8'), x_spacing=0, mono_space=1, color=num_color, scale=1)
                        image.font_free()
                        img = image.Image("/sd/gen"+str(gen)+"/"+xxxxx+pinyin_pokename+"/sprite.jpg")
                        canvas1.draw_image(img, 135,31+i*27, 1, 1, alpha=256)
                        del img
                        gc.collect()
                    else:
                        canvas1.draw_string(175, 41+(i-5)*27, pokename[0], color=num_color, scale=1)
                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                        canvas1.draw_string(215, 38+(i-5)*27, pokename[1].encode('utf-8'), x_spacing=0, mono_space=1, color=num_color, scale=1)
                        image.font_free()
                        img = image.Image("/sd/gen"+str(gen)+"/"+xxxxx+pinyin_pokename+"/sprite.jpg")
                        canvas1.draw_image(img, 295,31+(i-5)*27, 1, 1, alpha=256)
                        del img
                        gc.collect()

                    del pokename
                    del attributes
                del pinyin_results
                gc.collect()
                lcd.display(canvas1)

            if flag==1 and change_flag1==0 and change_flag2==0 and random_flag==0 and form_flag==0 and choose_flag==0:
                sensor.run(1)
                canvas1.clear()

                img = sensor.snapshot()

                canvas1.draw_image(img, 48, 8, 1, 1, alpha=256)
                canvas1.draw_string(56, 2, "Press White Button To Capture An Image", color=(200, 200, 200), scale=1)
                canvas1.draw_string(58, 224,"Press Green Button To Broswe Randomly", color=(200, 200, 200), scale=1)
                lcd.display(canvas1)

            if (current_key_state == 0 and last_key_state == 1) or (current_boot_state == 0 and last_boot_state == 1) or change_flag1==1 or change_flag2==1 or random_flag==1 or form_flag==1 or choose_flag==1:
                #print((current_key_state == 0 and last_key_state == 1),change_flag1,change_flag2,random_flag,form_flag)
                if flag==-1:
                    if menu_collect==1:
                        flag=1
                    elif menu_collect==2:
                        flag=-2

                    cry_num=0
                    chosen_color=0
                    invert_flag=False
                    draw_tim.stop()

                    special_alpha=256
                    special_flag1=0
                    special_flag2=0
                    alpha_direct=1
                    gif_flag=0
                    current_frame = 0
                    canvas1.clear()
                    canvas2.clear()
                    canvas3.clear()
                    canvas4.clear()

                    time_flag=False
                    tim.stop()

                    read_flag0=0
                    read_flag2=0
                    read_init_flag0=0
                    read_init_flag2=0

                elif flag==-2:
                    utime.sleep_ms(50)
                    key_chosen_flag=True
                    if key_chosen==20:
                        flag=1
                        random_flag=1
                    elif key_chosen==28:
                        input_text=input_text[:-1]
                    elif key_chosen>=1:
                        if len(input_text)<=4:
                            if key_chosen<=19:
                                input_text += "QWERTYUIOPASDFGHJKLZXCVBNM"[key_chosen-1]
                            else:
                                input_text += "QWERTYUIOPASDFGHJKLZXCVBNM"[key_chosen-2]
                    elif key_chosen<0:
                        flag=0
                        choose_flag=1

                elif flag==0 and change_flag1==0 and change_flag2==0 and random_flag==0 and form_flag==0 and choose_flag==0:
                    flag=-1
                    invert_flag=True
                    draw_tim.start()
                    cry_num=0
                    special_alpha=256
                    special_flag1=0
                    special_flag2=0
                    alpha_direct=1
                    gif_flag=0
                    current_frame = 0
                    canvas1.clear()
                    canvas2.clear()
                    canvas3.clear()
                    canvas4.clear()


                    time_flag=False
                    tim.stop()

                    read_flag0=0
                    read_flag2=0
                    read_init_flag0=0
                    read_init_flag2=0

                elif flag==1 or change_flag1==1 or change_flag2==1 or random_flag==1 or form_flag==1 or choose_flag==1:
                    flag=0
                    cry_num=0
                    special_alpha=256
                    special_flag1=0
                    special_flag2=0
                    alpha_direct=1
                    gif_flag=0
                    current_frame = 0
                    canvas1.clear()
                    canvas2.clear()
                    canvas3.clear()
                    canvas4.clear()

                    sensor.run(0)
                    tim.start()

                    read_flag0=0
                    read_flag1=0
                    read_flag2=0
                    read_init_flag0=0
                    read_init_flag1=0
                    read_init_flag2=0

                    if change_flag1==0 and change_flag2==0 and random_flag==0 and form_flag==0 and choose_flag==0:
                        read_init_flag0=1
                        form_num=0

                        gc.collect()

                        task = kpu.load_flash(0x300000,0, 0, 60000000)

                        fmap = kpu.forward(task, img)
                        plist=fmap[:]
                        pmax=sorted(plist)[-5:]
                        pmax.reverse()
                        max_pokemon=plist.index(max(plist))
                        max_pokemon_name=pokemon_linkname[max_pokemon].strip()


                        k=pokemon_linkname.index(max_pokemon_name)+1
                        x=str(k)
                        x='0'*(4-len(x))+x
                        linkname=max_pokemon_name

                        canvas1.draw_image(img, 5, 5, 0.5, 0.5, alpha=256)
                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                        canvas1.draw_string(5,125, b'识别结果:', x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                        image.font_free()

                        for i in range(5):
                            max_index=plist.index(pmax[i])
                            canvas1.draw_string(5,145+i*16,"%s(%.2f%%)"%(pokemon_linkname[max_index].strip(),pmax[i]*100),scale=1,color=(40*i, 250-50*i, 160+10*i))
                            #comm.send_classify_result(pmax[i], max_index, pokemon_linkname[max_index].strip())

                        del pmax
                        del plist
                        del fmap
                        del img
                        kpu.deinit(task)
                        del task

                        gc.collect()

                    elif change_flag1==1:
                        change_flag1=0
                        form_num=0
                        k=(pokemon_linkname.index(linkname)-1)%1025+1
                        x=str(k)
                        x='0'*(4-len(x))+x
                        linkname=pokemon_linkname[k-1]

                    elif change_flag2==1:
                        change_flag2=0
                        form_num=0
                        k=(pokemon_linkname.index(linkname)+1)%1025+1
                        x=str(k)
                        x='0'*(4-len(x))+x
                        linkname=pokemon_linkname[k-1]

                    elif random_flag==1:
                        random_flag=0
                        form_num=0
                        current_time = utime.ticks_ms()
                        k = (current_time % 1025) + 1

                        x=str(k)
                        x='0'*(4-len(x))+x
                        linkname=pokemon_linkname[k-1]

                    elif choose_flag==1:
                        choose_flag=0
                        key_chosen=20
                        input_text = ""
                        k=choose_pokemon+1

                        x=str(k)
                        x='0'*(4-len(x))+x
                        linkname=pokemon_linkname[k-1]

                    if k<=151:
                        gen=1
                    elif k<=251:
                        gen=2
                    elif k<=386:
                        gen=3
                    elif k<=493:
                        gen=4
                    elif k<=649:
                        gen=5
                    elif k<=721:
                        gen=6
                    elif k<=809:
                        gen=7
                    elif k<=905:
                        gen=8
                    else:
                        gen=9


                    file_path="/sd/gen"+str(gen)+"/"+x+linkname+"/inform.txt"


                    with open(file_path, "r",encoding='utf-8') as f:
                        data = f.readlines()
                        pokename=eval(data[0])
                        attributes=eval(data[1])
                        categories=eval(data[2])
                        special=eval(data[3])
                        height=data[4].strip()
                        weight=data[5].strip()
                        pokecolor=data[6].strip()
                        data1=eval(data[7])
                        gif_count=int(data[8])

                    del data
                    gc.collect()

                    if form_flag==1:
                        form_flag=0
                        form_num+=1
                        form_path="/sd/gen"+str(gen)+"/"+x+linkname+"/form/form_info/"+str(form_num)+".txt"
                        try:
                            with open(form_path, "r",encoding='utf-8') as f:
                                data = f.readlines()
                                formname=eval(data[0])[1]
                                attributes=eval(data[1])
                                categories=data[2].strip()
                                special=eval(data[3])
                                height=data[4].strip()
                                weight=data[5].strip()
                                pokecolor=data[6].strip()
                                data1=eval(data[7])
                            form_show_flag=1
                        except:
                            try:
                                form_num=0
                                form_path="/sd/gen"+str(gen)+"/"+x+linkname+"/form/form_info/0.txt"
                                with open(form_path, "r",encoding='utf-8') as f:
                                    data = f.readlines()
                                    formname=eval(data[0])[1]
                                    attributes=eval(data[1])
                                    categories=data[2].strip()
                                    special=eval(data[3])
                                    height=data[4].strip()
                                    weight=data[5].strip()
                                    pokecolor=data[6].strip()
                                    data1=eval(data[7])
                                form_show_flag=1
                            except:
                                form_num=0


                    if not read_init_flag0==1:

                        if form_num==0:
                            evo_txt="/sd/gen"+str(gen)+"/"+x+linkname+"/evolution.txt"
                            evo_img="/sd/gen"+str(gen)+"/"+x+linkname+"/evolution/"
                            with open(evo_txt,'r') as f:
                                evolutions=eval(f.read().strip())

                        elif int(x)==555 and (form_num==2 or form_num==3):
                            evo_txt="/sd/gen"+str(gen)+"/"+x+linkname+"/form/form_evo/evolution_form.txt"
                            evo_img="/sd/gen"+str(gen)+"/"+x+linkname+"/form/form_evo/"
                            with open(evo_txt,'r') as f:
                                evolutions=eval(f.read().strip())

                        elif form_num==1:
                            try:
                                evo_txt="/sd/gen"+str(gen)+"/"+x+linkname+"/form/form_evo/evolution_form.txt"
                                evo_img="/sd/gen"+str(gen)+"/"+x+linkname+"/form/form_evo/"
                                with open(evo_txt,'r') as f:
                                    evolutions=eval(f.read().strip())
                            except:
                                evo_txt="/sd/gen"+str(gen)+"/"+x+linkname+"/evolution.txt"
                                evo_img="/sd/gen"+str(gen)+"/"+x+linkname+"/evolution/"
                                with open(evo_txt,'r') as f:
                                    evolutions=eval(f.read().strip())


                        if evolutions[0]=='↔':
                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                            canvas1.draw_string(5,5,b'形态变化', x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                            image.font_free()

                            num_evo=len(evolutions)-1
                            num_evo=num_evo/2

                            if num_evo==2:
                                lineone=40
                                for num in range(num_evo):
                                    evolution_img = image.Image(evo_img+str(num)+".jpg")
                                    canvas1.draw_image(evolution_img, 40,
                                                        lineone+90*num+5,
                                                            0.6, 0.6, alpha=256)
                                    del evolution_img
                                    gc.collect()

                                    if '且' in evolutions[2*num+2][0]:
                                        condition=evolutions[2*num+2][0].split('且')
                                        con1=condition[0]
                                        con2=condition[1]
                                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                        canvas1.draw_string(15,
                                                    lineone+90*num+5+40,
                                                    con1.encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        canvas1.draw_string(15,
                                                    lineone+90*num+20+40,
                                                    con2.encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        canvas1.draw_string(15,
                                                    lineone+90*num+35+40,
                                                    evolutions[2*num+1][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        image.font_free()

                                    elif '或' in evolutions[2*num+2][0]:
                                        condition=evolutions[2*num+2][0].split('或')
                                        con1=condition[0]
                                        con2=condition[1]
                                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                        canvas1.draw_string(15,
                                                    lineone+90*num+5+40,
                                                    con1.encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        canvas1.draw_string(15,
                                                    lineone+90*num+20+40,
                                                    con2.encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        canvas1.draw_string(15,
                                                    lineone+90*num+35+40,
                                                    evolutions[2*num+1][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        image.font_free()

                                    else:
                                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                        canvas1.draw_string(15,
                                                    lineone+90*num+15+40,
                                                    evolutions[2*num+2][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        canvas1.draw_string(15,
                                                    lineone+90*num+30+40,
                                                    evolutions[2*num+1][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        image.font_free()

                            else:
                                lineone=int((240-num_evo*(48+15))/2)
                                for num in range(num_evo):
                                    evolution_img = image.Image(evo_img+str(num)+".jpg")
                                    canvas1.draw_image(evolution_img, 65,
                                                        lineone+68*num+5,
                                                            0.6, 0.6, alpha=256)
                                    del evolution_img
                                    gc.collect()

                                    image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                    canvas1.draw_string(5,
                                                lineone+68*num+15,
                                                evolutions[2*num+2][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                    canvas1.draw_string(5,
                                                lineone+68*num+30,
                                                evolutions[2*num+1][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))

                                    image.font_free()

                        else:
                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                            canvas1.draw_string(5,5,b'进化链', x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                            image.font_free()
                            num_evo=len(evolutions)
                            num_evo=(num_evo+1)/2

                            first_evo=0
                            first_evo_list=[]
                            second_evo=0
                            second_evo_list=[]
                            third_evo=0
                            third_evo_list=[]
                            for iii,evo in enumerate(evolutions):
                                if evo[0] in ('未进化','无进化','不进化','幼年','亲代'):
                                    first_evo+=1
                                    first_evo_list.append(iii)
                                elif evo[0]=='1阶进化':
                                    second_evo+=1
                                    second_evo_list.append(iii)
                                elif evo[0]=='2阶进化':
                                    third_evo+=1
                                    third_evo_list.append(iii)

                            img_size=60
                            one_size=30
                            if k==133:
                                for i,iii in enumerate(second_evo_list):
                                    p=i%2
                                    q=i//2
                                    evolution_img = image.Image(evo_img+str(iii)+".jpg")
                                    canvas1.draw_image(evolution_img, 50*p+15,
                                                        50*q+25,
                                                            0.5, 0.5, alpha=256)
                                    del evolution_img
                                    gc.collect()

                            elif k==840:

                                lineone=5
                                for i,iii in enumerate(first_evo_list):
                                    evolution_img = image.Image(evo_img+str(iii)+".jpg")
                                    canvas1.draw_image(evolution_img, 5,
                                                        50,
                                                            0.5, 0.5, alpha=256)
                                    del evolution_img
                                    gc.collect()

                                for j,jjj in enumerate(second_evo_list):
                                    evolution_img = image.Image(evo_img+str(jjj)+".jpg")
                                    canvas1.draw_image(evolution_img, 70,
                                                        lineone+75*j,
                                                            0.5, 0.5, alpha=256)
                                    del evolution_img
                                    gc.collect()

                                    image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                    canvas1.draw_string(55,
                                                lineone+75*j+35,
                                                evolutions[jjj-1][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                    image.font_free()


                                    image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                    canvas1.draw_string(55,
                                                lineone+75*j+50,
                                                evolutions[jjj][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))

                                    image.font_free()
                                for p,ppp in enumerate(third_evo_list):
                                    evolution_img = image.Image(evo_img+str(ppp)+".jpg")
                                    canvas1.draw_image(evolution_img, 5,
                                                        120,
                                                            0.5, 0.5, alpha=256)
                                    del evolution_img
                                    gc.collect()

                                    image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                    canvas1.draw_string(5,
                                                170,
                                                evolutions[ppp-1][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                    image.font_free()


                                    image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                    canvas1.draw_string(5,
                                                170+15,
                                                evolutions[ppp][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))

                                    image.font_free()

                                canvas1.draw_line(40, 75, 60, 30, color=(200,200,200), thickness=2)
                                canvas1.draw_line(40, 75, 60, 100, color=(200,200,200), thickness=2)
                                canvas1.draw_line(40, 75, 60, 170, color=(200,200,200), thickness=2)
                                canvas1.draw_line(60, 170,40, 150, color=(200,200,200), thickness=2)

                            elif third_evo==0 and second_evo==0 and first_evo!=0:
                                if first_evo==1:
                                    one_size=45
                                    lineone=(220-first_evo*(img_size+30))//2
                                    evolution_img = image.Image("/sd/gen"+str(gen)+"/"+x+linkname+"/evolution/0.jpg")
                                    canvas1.draw_image(evolution_img, (120-img_size)//2,
                                                        lineone,
                                                            0.8, 0.8, alpha=256)
                                    del evolution_img
                                    gc.collect()

                                    image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                    canvas1.draw_string(10,
                                                lineone+img_size+5,
                                                evolutions[first_evo_list[0]][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                    canvas1.draw_string(10,
                                                lineone+img_size+15+5,
                                                evolutions[first_evo_list[0]][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                    if len(evolutions[first_evo_list[0]])<=3:
                                        canvas1.draw_string(10,
                                            lineone+img_size+35,
                                            evolutions[first_evo_list[0]][2].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                    else:
                                        canvas1.draw_string(10,
                                            lineone+img_size+35,
                                            evolutions[first_evo_list[0]][2].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        canvas1.draw_string(40,
                                            lineone+img_size+35,
                                            evolutions[first_evo_list[0]][3].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))

                                    image.font_free()

                                elif first_evo<=3:
                                    one_size=45
                                    lineone=(220-first_evo*(img_size))//2
                                    for i,iii in enumerate(first_evo_list):
                                        evolution_img = image.Image(evo_img+str(iii)+".jpg")
                                        canvas1.draw_image(evolution_img, (120-img_size)//2+one_size-15,
                                                            lineone+img_size*i,
                                                                0.8, 0.8, alpha=256)
                                        del evolution_img
                                        gc.collect()

                                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                        canvas1.draw_string(5,
                                                    lineone+img_size*i-5,
                                                    evolutions[iii][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        canvas1.draw_string(5,
                                                    lineone+img_size*i+15-5,
                                                    evolutions[iii][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        if len(evolutions[iii])<=3:
                                            canvas1.draw_string(5,
                                                lineone+img_size*i+30-5,
                                                evolutions[iii][2].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        else:
                                            canvas1.draw_string(5,
                                                lineone+img_size*i+30-5,
                                                evolutions[iii][2].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            canvas1.draw_string(35,
                                                lineone+img_size*i+30-5,
                                                evolutions[iii][3].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))

                                        image.font_free()

                            elif third_evo==0 and second_evo!=0 and first_evo!=0:

                                if first_evo!=1:
                                    img_size=30
                                    one_size=20
                                    lineone_first=(240-30*first_evo-30*(first_evo))//2-5
                                    lineone_second=lineone_first
                                    for i,iii in enumerate(first_evo_list):
                                        evolution_img = image.Image(evo_img+str(iii)+".jpg")
                                        canvas1.draw_image(evolution_img, 35,
                                                            lineone_first+i*50,
                                                                0.4, 0.4, alpha=256)
                                        del evolution_img
                                        gc.collect()

                                    for j,jjj in enumerate(second_evo_list):
                                        evolution_img = image.Image(evo_img+str(jjj)+".jpg")
                                        canvas1.draw_image(evolution_img, 70,
                                                            lineone_second+(img_size+one_size)*j,
                                                                0.4, 0.4, alpha=256)
                                        del evolution_img
                                        gc.collect()

                                        if j==2:
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                            canvas1.draw_string(50,
                                                        15,
                                                        evolutions[jjj][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))

                                            image.font_free()
                                        elif j==3:
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                            canvas1.draw_string(50,
                                                        lineone_second+img_size*j+img_size+one_size*j,
                                                        evolutions[jjj][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))

                                            image.font_free()

                                        if isinstance(evolutions[jjj-1][0],int) or "Let's Go" in evolutions[jjj-1][0]:
                                            canvas1.draw_string(5,
                                                    lineone_second+img_size*j+one_size*j+25+3-5,
                                                    str(evolutions[jjj-1][0]),scale=1,color=(250, 250, 250))
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(20,
                                                        lineone_second+img_size*j+one_size*j+25-5,
                                                        b'级', x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            try:
                                                canvas1.draw_string(5,
                                                        lineone_second+img_size*j+one_size*j+40-5,
                                                        evolutions[jjj-1][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            except:
                                                pass
                                            image.font_free()

                                        else:
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(5,
                                                        lineone_second+img_size*j+img_size+5-5,
                                                        evolutions[jjj-1][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            image.font_free()



                                elif second_evo==1:
                                    lineone=(240-img_size*2-one_size)//2
                                    for i,iii in enumerate(first_evo_list):
                                        evolution_img = image.Image(evo_img+str(iii)+".jpg")
                                        canvas1.draw_image(evolution_img, (120-img_size*first_evo)//2+img_size*i+one_size,
                                                            lineone-5,
                                                                0.6, 0.6, alpha=256)
                                        del evolution_img
                                        gc.collect()

                                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                        canvas1.draw_string(5+img_size*i,
                                                    lineone+5,
                                                    evolutions[iii][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        if len(evolutions[iii])<=3:
                                            canvas1.draw_string(5,
                                                lineone+20,
                                                evolutions[iii][2].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        else:
                                            canvas1.draw_string(5,
                                                lineone+20,
                                                evolutions[iii][2].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            canvas1.draw_string(35,
                                                lineone+20,
                                                evolutions[iii][3].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        image.font_free()

                                    for j,jjj in enumerate(second_evo_list):
                                        if "Let's Go" != evolutions[jjj-1][0]:
                                            condition_img = image.Image(evo_img+str(jjj-1)+".jpg")
                                            canvas1.draw_image(condition_img, (120-img_size*second_evo)//2+img_size*j+one_size+20,
                                                                lineone+img_size-5,
                                                                    1, 1, alpha=256)

                                            del condition_img
                                            gc.collect()

                                        if isinstance(evolutions[jjj-1][0],int):
                                            canvas1.draw_string(5,
                                                    lineone+img_size+3,
                                                    str(evolutions[jjj-1][0]),scale=1,color=(250, 250, 250))
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(15,
                                                        lineone+img_size,
                                                        b'级', x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            try:
                                                canvas1.draw_string(30,
                                                        lineone+img_size,
                                                        evolutions[jjj-1][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            except:
                                                pass
                                            image.font_free()
                                        elif "Let's Go" in evolutions[jjj-1][0]:
                                            canvas1.draw_string(5,
                                                    lineone+img_size,
                                                    evolutions[jjj-1][1].encode('utf-8'),scale=1,color=(250, 250, 250))

                                        else:
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(5,
                                                        lineone+img_size,
                                                        evolutions[jjj-1][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            image.font_free()

                                        evolution_img = image.Image(evo_img+str(jjj)+".jpg")
                                        canvas1.draw_image(evolution_img, (120-img_size)//2+img_size*j+one_size,
                                                            lineone+(img_size+one_size),
                                                                0.6, 0.6, alpha=256)
                                        del evolution_img
                                        gc.collect()

                                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                        canvas1.draw_string(5,
                                                    lineone+img_size+one_size+5,
                                                    evolutions[jjj][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))

                                        if len(evolutions[jjj])<=3:
                                            canvas1.draw_string(5,
                                                lineone+img_size+one_size+20,
                                                evolutions[jjj][2].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        else:
                                            canvas1.draw_string(5,
                                                lineone+img_size+one_size+20,
                                                evolutions[jjj][2].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            canvas1.draw_string(35,
                                                lineone+img_size+one_size+20,
                                                evolutions[jjj][3].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        image.font_free()

                                elif second_evo==2:
                                    lineone=(240-50*2-30*2)//2
                                    for i,iii in enumerate(first_evo_list):
                                        evolution_img = image.Image(evo_img+str(iii)+".jpg")
                                        canvas1.draw_image(evolution_img, (120-img_size*first_evo)//2+img_size*i,
                                                            lineone-20,
                                                                0.6, 0.6, alpha=256)
                                        del evolution_img
                                        gc.collect()

                                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                        canvas1.draw_string((120-img_size*first_evo)//2+img_size*i,
                                                    lineone+35,
                                                    evolutions[iii][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        image.font_free()

                                    for j,jjj in enumerate(second_evo_list):
                                        condition_img = image.Image(evo_img+str(jjj-1)+".jpg")
                                        canvas1.draw_image(condition_img, (120-img_size*second_evo)//2+img_size*j+10,
                                                            lineone+img_size-10,
                                                                1, 1, alpha=256)
                                        del condition_img
                                        gc.collect()

                                        evolution_img = image.Image(evo_img+str(jjj)+".jpg")
                                        canvas1.draw_image(evolution_img, (120-second_evo*img_size)//2+img_size*j,
                                                            lineone+(img_size+one_size),
                                                                0.6, 0.6, alpha=256)
                                        del evolution_img
                                        gc.collect()

                                        if isinstance(evolutions[jjj-1][0],int):
                                            canvas1.draw_string(2+60*j,
                                                    lineone+img_size+13,
                                                    str(evolutions[jjj-1][0]),scale=1,color=(250, 250, 250))
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(15+60*j,
                                                        lineone+img_size+10,
                                                        b'级', x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            image.font_free()

                                            try:
                                                if evolutions[jjj-1][1] in ('1%','99%','50%'):
                                                    canvas1.draw_string(30+60*j,
                                                            lineone+img_size+13,
                                                            str(evolutions[jjj-1][1]),scale=1,color=(250, 250, 250))
                                                else:
                                                    image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                                    canvas1.draw_string(30+60*j,
                                                            lineone+img_size+10,
                                                            evolutions[jjj-1][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                                    image.font_free()
                                            except:
                                                pass

                                        elif "Let's Go" in evolutions[jjj-1][0]:
                                            canvas1.draw_string(5,
                                                    lineone+img_size,
                                                    evolutions[jjj-1][1].encode('utf-8'),scale=1,color=(250, 250, 250))

                                        elif '99%/1%' == evolutions[jjj-1][0]:
                                            canvas1.draw_string(2+60*j,
                                                    lineone+img_size+25,
                                                    str(evolutions[jjj-1][0]),scale=1,color=(250, 250, 250))

                                        else:
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(2+60*j,
                                                        lineone+img_size+10,
                                                        evolutions[jjj-1][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            image.font_free()


                                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                        canvas1.draw_string(2+60*j,
                                                    lineone+60*2+one_size,
                                                    evolutions[jjj][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))

                                        image.font_free()

                                elif second_evo>=3 and second_evo<=4:
                                    img_size=48
                                    one_size=30
                                    lineone=(240-48*second_evo-30*(second_evo))//2
                                    for i,iii in enumerate(first_evo_list):
                                        evolution_img = image.Image(evo_img+str(iii)+".jpg")
                                        canvas1.draw_image(evolution_img, 5,
                                                            (240-first_evo*(img_size+one_size))//2,
                                                                0.5, 0.5, alpha=256)
                                        del evolution_img
                                        gc.collect()

                                    for j,jjj in enumerate(second_evo_list):

                                        if isinstance(evolutions[jjj-1][0],int) or "Let's Go" in evolutions[jjj-1][0]:
                                            canvas1.draw_string(5,
                                                    lineone+img_size*j+one_size*j+25+3,
                                                    str(evolutions[jjj-1][0]),scale=1,color=(250, 250, 250))
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(20,
                                                        lineone+img_size*j+one_size*j+25,
                                                        b'级', x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            try:
                                                canvas1.draw_string(5,
                                                        lineone+img_size*j+one_size*j+40,
                                                        evolutions[jjj-1][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            except:
                                                pass
                                            image.font_free()

                                        else:
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(5,
                                                        lineone+img_size*j+img_size,
                                                        evolutions[jjj-1][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            image.font_free()

                                        evolution_img = image.Image(evo_img+str(jjj)+".jpg")
                                        canvas1.draw_image(evolution_img, 55,
                                                            lineone+(img_size+one_size)*j,
                                                                0.5, 0.5, alpha=256)
                                        del evolution_img
                                        gc.collect()

                                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                        canvas1.draw_string(55,
                                                    lineone+img_size*j+img_size+one_size*j+5,
                                                    evolutions[jjj][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))

                                        image.font_free()

                            elif third_evo!=0 and second_evo!=0 and first_evo!=0:
                                image_size=36
                                one_size=15
                                if third_evo==1 and second_evo<=2:
                                    lineone=(240-img_size*3-one_size*2)//2+5
                                    for i,iii in enumerate(first_evo_list):
                                        evolution_img = image.Image(evo_img+str(iii)+".jpg")
                                        canvas1.draw_image(evolution_img, (120-img_size*first_evo)//2+img_size*i+one_size+20,
                                                            lineone,
                                                                0.6, 0.6, alpha=256)
                                        del evolution_img
                                        gc.collect()

                                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                        canvas1.draw_string(5+img_size*i,
                                                    lineone+10,
                                                    evolutions[iii][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        if len(evolutions[iii])<=3:
                                            canvas1.draw_string(5,
                                                lineone+25,
                                                evolutions[iii][2].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        else:
                                            canvas1.draw_string(5,
                                                lineone+25,
                                                evolutions[iii][2].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            canvas1.draw_string(35,
                                                lineone+25,
                                                evolutions[iii][3].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        image.font_free()

                                    for j,jjj in enumerate(second_evo_list):
                                        condition_img = image.Image(evo_img+str(jjj-1)+".jpg")
                                        canvas1.draw_image(condition_img, (120-img_size*second_evo)//2+img_size*j+one_size+45,
                                                            lineone+img_size-5,
                                                                0.8, 0.8, alpha=256)
                                        del condition_img
                                        gc.collect()

                                        if isinstance(evolutions[jjj-1][0],int):
                                            canvas1.draw_string(5,
                                                    lineone+img_size+3,
                                                    str(evolutions[jjj-1][0]),scale=1,color=(250, 250, 250))
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(15,
                                                        lineone+img_size,
                                                        b'级', x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            try:
                                                canvas1.draw_string(25,
                                                        lineone+img_size,
                                                        evolutions[jjj-1][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            except:
                                                pass
                                            image.font_free()
                                        elif "Let's Go" in evolutions[jjj-1][0]:
                                            canvas1.draw_string(5,
                                                    lineone+img_size,
                                                    evolutions[jjj-1][1].encode('utf-8'),scale=1,color=(250, 250, 250))
                                        else:
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(5,
                                                    lineone+img_size,
                                                    evolutions[jjj-1][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            image.font_free()

                                        evolution_img = image.Image(evo_img+str(jjj)+".jpg")
                                        canvas1.draw_image(evolution_img, (120-img_size)//2+img_size*j+one_size+20,
                                                            lineone+(img_size+one_size),
                                                                0.6, 0.6, alpha=256)
                                        del evolution_img
                                        gc.collect()

                                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                        canvas1.draw_string(5,
                                                    lineone+(img_size+one_size)+5,
                                                    evolutions[jjj][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        if len(evolutions[jjj])<=3:
                                            canvas1.draw_string(5,
                                                lineone+img_size+one_size+20,
                                                evolutions[jjj][2].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        else:
                                            canvas1.draw_string(5,
                                                lineone+img_size+one_size+20,
                                                evolutions[jjj][2].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            canvas1.draw_string(35,
                                                lineone+img_size+one_size+20,
                                                evolutions[jjj][3].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        image.font_free()

                                    for p,ppp in enumerate(third_evo_list):
                                        if "Let's Go" != evolutions[jjj-1][0]:
                                            condition_img = image.Image(evo_img+str(ppp-1)+".jpg")
                                            canvas1.draw_image(condition_img, (120-img_size*third_evo)//2+img_size*p+one_size+45,
                                                                lineone+img_size*2+one_size-5,
                                                                    0.8, 0.8, alpha=256)
                                            del condition_img
                                            gc.collect()

                                        if isinstance(evolutions[ppp-1][0],int):
                                            canvas1.draw_string(5,
                                                    lineone+img_size*2+3+10,
                                                    str(evolutions[ppp-1][0]),scale=1,color=(250, 250, 250))
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(15,
                                                        lineone+img_size*2+10,
                                                        b'级', x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            try:
                                                canvas1.draw_string(25,
                                                        lineone+img_size,
                                                        evolutions[ppp-1][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            except:
                                                pass
                                            image.font_free()

                                        elif "Let's Go" in evolutions[ppp-1][0]:
                                            canvas1.draw_string(5,
                                                    lineone+img_size,
                                                    evolutions[ppp-1][1].encode('utf-8'),scale=1,color=(250, 250, 250))
                                        else:
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(5,
                                                        lineone+img_size*2+10,
                                                        evolutions[ppp-1][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            image.font_free()

                                        evolution_img = image.Image(evo_img+str(ppp)+".jpg")
                                        canvas1.draw_image(evolution_img, (120-img_size)//2+img_size*p+one_size+20,
                                                            lineone+(img_size+one_size)*2,
                                                                0.6, 0.6, alpha=256)
                                        del evolution_img
                                        gc.collect()

                                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                        canvas1.draw_string(5,
                                                    lineone+(img_size+one_size)*2+5,
                                                    evolutions[ppp][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        if len(evolutions[ppp])<=3:
                                            canvas1.draw_string(5,
                                                lineone+img_size*2+one_size*2+20,
                                                evolutions[ppp][2].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        else:
                                            canvas1.draw_string(5,
                                                lineone+img_size*2+one_size*2+20,
                                                evolutions[ppp][2].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            canvas1.draw_string(35,
                                                lineone+img_size*2+one_size*2+20,
                                                evolutions[ppp][3].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        image.font_free()

                                elif third_evo<=2 and second_evo<=2:
                                    lineone=10
                                    for i,iii in enumerate(first_evo_list):
                                        evolution_img = image.Image(evo_img+str(iii)+".jpg")
                                        canvas1.draw_image(evolution_img, 50,
                                                            lineone,
                                                                0.6, 0.6, alpha=256)
                                        del evolution_img
                                        gc.collect()

                                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                        canvas1.draw_string(40,
                                                    lineone+50,
                                                    evolutions[iii][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        image.font_free()

                                    for j,jjj in enumerate(second_evo_list):

                                        evolution_img = image.Image(evo_img+str(jjj)+".jpg")
                                        canvas1.draw_image(evolution_img, (120-50*second_evo)//2+50*j,
                                                            lineone+(img_size+one_size),
                                                                0.6, 0.6, alpha=256)
                                        del evolution_img
                                        gc.collect()

                                        if isinstance(evolutions[jjj-1][0],int):
                                            canvas1.draw_string(5+60*j,
                                                    lineone+img_size+13,
                                                    str(evolutions[jjj-1][0]),scale=1,color=(250, 250, 250))
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(15+60*j,
                                                        lineone+img_size+10,
                                                        b'级', x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            image.font_free()

                                            try:
                                                if evolutions[jjj-1][1] in ('1%','99%','50%'):
                                                    canvas1.draw_string(30+60*j,
                                                            lineone+img_size+13,
                                                            str(evolutions[jjj-1][1]),scale=1,color=(250, 250, 250))
                                                else:
                                                    image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                                    canvas1.draw_string(30+60*j,
                                                            lineone+img_size+10,
                                                            evolutions[jjj-1][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                                    image.font_free()
                                            except:
                                                pass
                                        elif "Let's Go" in evolutions[jjj-1][0]:
                                            canvas1.draw_string(5,
                                                    lineone+img_size,
                                                    evolutions[jjj-1][1].encode('utf-8'),scale=1,color=(250, 250, 250))
                                        else:
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(5,
                                                    lineone+img_size+10,
                                                    evolutions[jjj-1][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            image.font_free()


                                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                        canvas1.draw_string((120-60*second_evo)//2+60*j+2,
                                                    lineone+img_size*2,
                                                    evolutions[jjj][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        image.font_free()

                                    for p,ppp in enumerate(third_evo_list):

                                        evolution_img = image.Image(evo_img+str(ppp)+".jpg")
                                        canvas1.draw_image(evolution_img, (120-50*third_evo)//2+50*p,
                                                            lineone+(img_size+one_size)*2,
                                                                0.6, 0.6, alpha=256)
                                        del evolution_img
                                        gc.collect()

                                        if isinstance(evolutions[ppp-1][0],int) or "Let's Go" in evolutions[ppp-1][0]:
                                            canvas1.draw_string(5+60*p,
                                                    lineone+img_size*2+3+15,
                                                    str(evolutions[ppp-1][0]),scale=1,color=(250, 250, 250))
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(15+60*p,
                                                        lineone+img_size*2+15,
                                                        b'级', x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            image.font_free()

                                            try:
                                                if evolutions[ppp-1][1] in ('1%','99%','50%'):
                                                    canvas1.draw_string(30+60*p,
                                                            lineone+img_size*2+13+5,
                                                            str(evolutions[ppp-1][1]),scale=1,color=(250, 250, 250))
                                                else:
                                                    image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                                    canvas1.draw_string(30+60*p,
                                                            lineone+img_size*2+15,
                                                            evolutions[ppp-1][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                                    image.font_free()
                                            except:
                                                pass
                                        else:
                                            image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                                            canvas1.draw_string(5+50*p,
                                                        lineone+img_size*2+15,
                                                        evolutions[ppp-1][0].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                            image.font_free()


                                        image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')

                                        canvas1.draw_string((120-60*third_evo)//2+60*p+2,
                                                    lineone+img_size*3+15,
                                                    evolutions[ppp][1].encode('utf-8'), x_spacing=0, mono_space=1,scale=1,color=(250, 250, 250))
                                        image.font_free()



                    for col in colors:
                        if col[0]==pokecolor:
                            canvas1.draw_line(0, 0, 0, 239, color=(col[1],col[2], col[3]), thickness=1)
                            canvas1.draw_line(319, 0, 319, 239, color=(col[1],col[2], col[3]), thickness=1)
                            canvas1.draw_line(0, 239, 319, 239, color=(col[1],col[2], col[3]), thickness=1)
                            canvas1.draw_line(0, 0, 319, 0, color=(col[1],col[2], col[3]), thickness=1)

                    canvas1.draw_string(220,5,"%s %s"%(pokename[0],pokename[3]),scale=1,color=(255, 255, 255))

                    now_name=int(pokename[0].split('#')[-1])
                    canvas1.draw_string(136,226,"0"*(4-len(str(now_name)))+"%s/1025"%(str(now_name)),scale=1,color=(255, 255, 255))
                    if now_name==1:
                        pre_name=1025
                        next_name=now_name+1
                    elif now_name==1025:
                        pre_name=now_name-1
                        next_name=1
                    else:
                        pre_name=now_name-1
                        next_name=now_name+1

                    backname=pokemon_linkname[pre_name-1]
                    canvas1.draw_line(5, 226, 5, 236, color=(255,255,255), thickness=1)
                    canvas1.draw_line(5, 231, 15, 236, color=(255,255,255), thickness=1)
                    canvas1.draw_line(5, 231, 15, 226, color=(255,255,255), thickness=1)
                    canvas1.draw_line(15, 226, 15, 236, color=(255,255,255), thickness=1)
                    canvas1.draw_string(18,226,b"%s %s"%('#'+'0'*(4-len(str(pre_name)))+str(pre_name),backname),scale=1,color=(255, 255, 255))

                    forname=pokemon_linkname[next_name-1]
                    canvas1.draw_line(315, 226, 315, 236, color=(255,255,255), thickness=1)
                    canvas1.draw_line(315, 231, 305, 236, color=(255,255,255), thickness=1)
                    canvas1.draw_line(315, 231, 305, 226, color=(255,255,255), thickness=1)
                    canvas1.draw_line(305, 226, 305, 236, color=(255,255,255), thickness=1)
                    canvas1.draw_string(270-6*len(forname.strip()),226,b"%s %s"%(forname,'#'+'0'*(4-len(str(next_name)))+str(next_name)),scale=1,color=(255, 255, 255))

                    image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                    for col in colors:
                        if col[0]==pokecolor:
                            canvas1.draw_string(220,20,b"%s"%(pokename[1]),x_spacing=0, mono_space=1,scale=1.25,color=(col[1],col[2], col[3]))
                    canvas1.draw_string(220,43,b"%s"%(pokename[2]),x_spacing=0, mono_space=1,scale=1,color=(255, 255, 255))

                    attr_count=0
                    for attr in attributes:
                        for value in values:
                            if value[0]==attr:
                                attr_count+=1
                                if attr_count==1:
                                    draw_rounded_rectangle(canvas1,220,63,47,20,2,(value[1],value[2],value[3]))
                                    if len(attr)==1:
                                        canvas1.draw_string(235,64,b"%s"%(attributes[0]),x_spacing=0, mono_space=1,scale=1,color=(value[1],value[2],value[3]))
                                    elif len(attr)==2:
                                        canvas1.draw_string(227,64,b"%s"%(attributes[0]),x_spacing=0, mono_space=1,scale=1,color=(value[1],value[2],value[3]))
                                    else:
                                        canvas1.draw_string(219,64,b"%s"%(attributes[0]),x_spacing=0, mono_space=1,scale=1,color=(value[1],value[2],value[3]))
                                elif attr_count==2:
                                    draw_rounded_rectangle(canvas1,269,63,47,20,2,(value[1],value[2],value[3]))
                                    if len(attr)==1:
                                        canvas1.draw_string(285,64,b"%s"%(attributes[1]),x_spacing=0, mono_space=1,scale=1,color=(value[1],value[2],value[3]))
                                    elif len(attr)==2:
                                        canvas1.draw_string(276,64,b"%s"%(attributes[1]),x_spacing=0, mono_space=1,scale=1,color=(value[1],value[2],value[3]))
                                    else:
                                        canvas1.draw_string(269,64,b"%s"%(attributes[1]),x_spacing=0, mono_space=1,scale=1,color=(value[1],value[2],value[3]))

                    if isinstance(categories,list):
                        canvas1.draw_string(220,85,b"%s"%(categories[0]),x_spacing=0, mono_space=1,scale=1,color=(255, 255, 255))
                    elif isinstance(categories,str):
                        canvas1.draw_string(220,85,b"%s"%(categories),x_spacing=0, mono_space=1,scale=1,color=(255, 255, 255))

                    canvas1.draw_string(220,105,b"特性",x_spacing=0, mono_space=1,scale=1,color=(200, 200, 200))

                    canvas1.draw_string(120,125,b"种族值:",x_spacing=0, mono_space=1,scale=1,color=(255, 255, 255))
                    canvas1.draw_string(121,153-8,b"ＨＰ",x_spacing=0, mono_space=1,scale=0.75,color=(138,198,84))
                    canvas1.draw_string(121,166-8,b"攻击",x_spacing=0, mono_space=1,scale=0.75,color=(248,203,60))
                    canvas1.draw_string(121,179-8,b"防御",x_spacing=0, mono_space=1,scale=0.75,color=(217,136,55))
                    canvas1.draw_string(121,192-8,b"特攻",x_spacing=0, mono_space=1,scale=0.75,color=(89,195,208))
                    canvas1.draw_string(121,205-8,b"特防",x_spacing=0, mono_space=1,scale=0.75,color=(88,144,205))
                    canvas1.draw_string(121,218-8,b"速度",x_spacing=0, mono_space=1,scale=0.75,color=(164,86,208))

                    image.font_free()

                    if data1[0]!='?':
                        strength1=int(str(data1[0]).split("：")[-1])
                        strength2=int(str(data1[1]).split("：")[-1])
                        strength3=int(str(data1[2]).split("：")[-1])
                        strength4=int(str(data1[3]).split("：")[-1])
                        strength5=int(str(data1[4]).split("：")[-1])
                        strength6=int(str(data1[5]).split("：")[-1])
                        data1_sum=strength1+strength2+strength3+strength4+strength5+strength6
                    else:
                        strength1='?'
                        strength2='?'
                        strength3='?'
                        strength4='?'
                        strength5='?'
                        strength6='?'
                        data1_sum='???'

                    canvas1.draw_string(175,131-5,b"%s"%(str(data1_sum)),scale=1.25,color=(255, 255, 255))
                    canvas1.draw_string(265,115-13,b"%s"%(height),scale=1,color=(255, 255, 255))
                    canvas1.draw_string(265,115-2,b"%s"%(weight),scale=1,color=(255, 255, 255))

                    draw_rounded_rectangle(canvas1,120,150-5,195,85-5,2,(255,255,255))
                    canvas1.draw_string(150,155-8,"%s"%(data1[0].split("：")[-1]),scale=1,color=(255, 255, 255))
                    canvas1.draw_string(150,168-8,"%s"%(data1[1].split("：")[-1]),scale=1,color=(255, 255, 255))
                    canvas1.draw_string(150,181-8,"%s"%(data1[2].split("：")[-1]),scale=1,color=(255, 255, 255))
                    canvas1.draw_string(150,194-8,"%s"%(data1[3].split("：")[-1]),scale=1,color=(255, 255, 255))
                    canvas1.draw_string(150,207-8,"%s"%(data1[4].split("：")[-1]),scale=1,color=(255, 255, 255))
                    canvas1.draw_string(150,220-8,"%s"%(data1[5].split("：")[-1]),scale=1,color=(255, 255, 255))

                    canvas1.draw_line(170, 152-5, 170, 228-6, color=(255,255,255), thickness=2)
                    #(151,200,122)
                    if data1[0]!='?':
                        canvas1.draw_line(171, 160-8, 170+int(strength1*0.75), 160-8, color=(138,198,84), thickness=5)
                        canvas1.draw_line(171, 173-8, 170+int(strength2*0.75), 173-8, color=(248,203,60), thickness=5)
                        canvas1.draw_line(171, 186-8, 170+int(strength3*0.75), 186-8, color=(217,136,55), thickness=5)
                        canvas1.draw_line(171, 199-8, 170+int(strength4*0.75), 199-8, color=(89,195,208), thickness=5)
                        canvas1.draw_line(171, 212-8, 170+int(strength5*0.75), 212-8, color=(88,144,205), thickness=5)
                        canvas1.draw_line(171, 225-8, 170+int(strength6*0.75), 225-8, color=(164,86,208), thickness=5)
                    else:
                        canvas1.draw_string(171+3,160-13,"???",scale=1,color=(255, 255, 255))
                        canvas1.draw_string(171+3,173-13,"???",scale=1,color=(255, 255, 255))
                        canvas1.draw_string(171+3,186-13,"???",scale=1,color=(255, 255, 255))
                        canvas1.draw_string(171+3,199-13,"???",scale=1,color=(255, 255, 255))
                        canvas1.draw_string(171+3,212-13,"???",scale=1,color=(255, 255, 255))
                        canvas1.draw_string(171+3,225-13,"???",scale=1,color=(255, 255, 255))

                    lcd.display(canvas1)

                    if form_show_flag==0:
                        if int(x)<=890:
                            if int(x)<=649:
                                gif_flag=1
                                frame_count=gif_count
                            else:
                                gif_flag=2
                                frame_count=gif_count
                        else:
                            gif_flag=0
                            frame = image.Image("/sd/gen"+str(gen)+"/"+x+linkname+"/1.jpg")
                            gif_w=frame.width()
                            gif_h=frame.height()
                            canvas4.draw_image(frame, 50-int(gif_w/2), 58-int(gif_h/2)-6, 1, 1, alpha=256)
                            lcd.display(canvas4,oft=(120,10))

                            del frame

                    elif form_show_flag==1:
                        form_show_flag=0
                        gif_flag=0

                        frame = image.Image("/sd/gen"+str(gen)+"/"+x+linkname+"/form/form_img/"+str(form_num)+".jpg")
                        gif_w=frame.width()*0.67
                        gif_h=frame.height()*0.67
                        canvas4.draw_image(frame, 50-int(gif_w/2), 58-int(gif_h/2), 0.67, 0.67, alpha=256)
                        if formname!=pokename[1]:
                            canvas4.draw_string(0,0,"%s"%(pokename[3]),scale=1,color=(255, 255, 255),alpha=256)
                            canvas4.draw_string(0,10,"%s"%(formname),scale=1,color=(255, 255, 255),alpha=256)
                        else:
                            canvas4.draw_string(0,0,"%s"%(pokename[3]),scale=1,color=(255, 255, 255),alpha=256)

                        lcd.display(canvas4,oft=(120,10))

                        del frame

                    gc.collect()

            if flag==0 and time_flag==True:

                time_flag=False
                canvas2.clear()
                canvas3.clear()
                canvas4.clear()

                if gif_flag==1:
                    gc.collect()
                    frame = image.Image("/sd/gen"+str(gen)+"/"+x+linkname+"/gif-jpg/"+str(current_frame+1)+".jpg")
                    gif_w=frame.width()
                    gif_h=frame.height()
                    canvas4.draw_image(frame, 50-int(gif_w/2), 58-int(gif_h/2), 1, 1, alpha=256)
                    lcd.display(canvas4,oft=(120,10))
                    current_frame = (current_frame + 1) % frame_count
                    del frame
                    gc.collect()
                elif gif_flag==2:
                    gc.collect()
                    frame = image.Image("/sd/gen"+str(gen)+"/"+x+linkname+"/gif-jpg/"+str(current_frame+1)+".jpg")
                    gif_w=frame.width()*1.25
                    gif_h=frame.height()*1.25
                    canvas4.draw_image(frame, 50-int(gif_w/2), 58-int(gif_h/2), 1.25, 1.25, alpha=256)
                    lcd.display(canvas4,oft=(120,10))
                    current_frame = (current_frame + 1) % frame_count
                    del frame
                    gc.collect()

                image.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')
                if len(special)==1:
                    canvas2.draw_string(0,0,b"%s"%(special[0]),x_spacing=0, mono_space=1,scale=1,color=(255, 255, 255),alpha=256)
                elif len(special)==2:
                    if special_flag1==0:
                        canvas2.draw_string(0,0,b"%s"%(special[0]),x_spacing=0, mono_space=1,scale=1,color=(255, 255, 255),alpha=256)
                    if special_flag1==1:
                        canvas2.draw_string(0,0,b"%s"%(special[-1]),x_spacing=0, mono_space=1,scale=1,color=(255,161,181),alpha=256)
                elif len(special)==3:
                    if special_flag2==0:
                        canvas2.draw_string(0,0,b"%s"%(special[0]),x_spacing=0, mono_space=1,scale=1,color=(255, 255, 255),alpha=256)
                    if special_flag2==1:
                        canvas2.draw_string(0,0,b"%s"%(special[1]),x_spacing=0, mono_space=1,scale=1,color=(255, 255, 255),alpha=256)
                    if special_flag2==2:
                        canvas2.draw_string(0,0,b"%s"%(special[-1]),x_spacing=0, mono_space=1,scale=1,color=(255,161,181),alpha=256)
                image.font_free()

                if len(special)==1:
                    lcd.display(canvas2,oft=(220, 125))
                else:
                    canvas3.draw_image(canvas2, 0, 0, 1, 1, alpha=special_alpha)
                    lcd.display(canvas3,oft=(220, 125))

                #time.sleep_ms(35)

                if alpha_direct==1:
                    if special_alpha>128:
                        special_alpha-=10
                    elif special_alpha-20>=0:
                        special_alpha-=20
                elif alpha_direct==0:
                    if special_alpha<128:
                        special_alpha+=20
                    elif special_alpha+10<=256:
                        special_alpha+=10

                if special_alpha-20<=0:
                    alpha_direct=0
                    if len(special)==2:
                        if special_flag1==0:
                            special_flag1=1
                        elif special_flag1==1:
                            special_flag1=0
                    elif len(special)==3:
                        if special_flag2==0:
                            special_flag2=1
                        elif special_flag2==1:
                            special_flag2=2
                        elif special_flag2==2:
                            special_flag2=0

                elif special_alpha+10>=256:
                    alpha_direct=1


            if read_init_flag0==1:
                if read_flag0==0 and read_flag2==0:
                    read_flag0=1
                    wav_dev = I2S(I2S.DEVICE_0)
                    player = audio.Audio(path="/sd/pc.wav")
                    player.volume(15)
                    wav_info = player.play_process(wav_dev)
                    wav_dev.channel_config(wav_dev.CHANNEL_1, I2S.TRANSMITTER, resolution=I2S.RESOLUTION_16_BIT,
                                           cycles=I2S.SCLK_CYCLES_16, align_mode=I2S.RIGHT_JUSTIFYING_MODE)
                    wav_dev.set_sample_rate(wav_info[1])

                elif read_flag0==1 and read_flag2==1:
                    read_flag0=0
                    wav_dev = I2S(I2S.DEVICE_0)
                    player = audio.Audio(path="/sd/gen"+str(gen)+"/"+x+linkname+"/mp3/inform.wav")
                    player.volume(15)
                    wav_info = player.play_process(wav_dev)
                    wav_dev.channel_config(wav_dev.CHANNEL_1, I2S.TRANSMITTER, resolution=I2S.RESOLUTION_16_BIT,
                                           cycles=I2S.SCLK_CYCLES_16, align_mode=I2S.RIGHT_JUSTIFYING_MODE)
                    wav_dev.set_sample_rate(wav_info[1])

                elif read_flag0==1 and read_flag2==0:
                    if flag==0:
                        ret = player.play()
                        if ret==0:
                            read_flag2=1
                            del player
                            gc.collect()
                    else:
                        read_flag2=1
                        del player
                        gc.collect()

                elif read_flag0==0 and read_flag2==1:
                    if flag==0:
                        ret = player.play()
                        if ret==0:
                            read_flag2=0
                            read_init_flag0=0
                            del player
                            gc.collect()
                    else:
                        read_flag2=0
                        read_init_flag0=0
                        del player
                        gc.collect()

            if read_init_flag1==1:
                if read_flag1==0:
                    bgm_flag=bgm_flag%9+1
                    # wav_dev = I2S(I2S.DEVICE_0)
                    # player = audio.Audio(path="/sd/bgm/pokemon"+str(bgm_flag)+".wav")
                    # player.volume(10)
                    # wav_info = player.play_process(wav_dev)
                    # wav_dev.channel_config(wav_dev.CHANNEL_1, I2S.TRANSMITTER, resolution=I2S.RESOLUTION_16_BIT,
                    #                        cycles=I2S.SCLK_CYCLES_16, align_mode=I2S.RIGHT_JUSTIFYING_MODE)
                    # wav_dev.set_sample_rate(wav_info[1])
                    read_flag1=1
                    read_flag2=0

                elif read_flag1==1:
                    ret = player.play()
                    if ret==0:
                        read_flag1=0
                        read_init_flag1=0
                        del player
                        gc.collect()

            if read_init_flag2==1:
                if read_flag2==0:
                    wav_dev = I2S(I2S.DEVICE_0)
                    if cry_num==0:
                        cry_num=1
                        player = audio.Audio(path="/sd/gen"+str(gen)+"/"+x+linkname+"/mp3/cry.wav")
                        player.volume(10)
                    elif cry_num==1:
                        cry_num=0
                        player = audio.Audio(path="/sd/gen"+str(gen)+"/"+x+linkname+"/mp3/inform.wav")
                        player.volume(15)

                    wav_info = player.play_process(wav_dev)
                    wav_dev.channel_config(wav_dev.CHANNEL_1, I2S.TRANSMITTER, resolution=I2S.RESOLUTION_16_BIT,
                                           cycles=I2S.SCLK_CYCLES_16, align_mode=I2S.RIGHT_JUSTIFYING_MODE)
                    wav_dev.set_sample_rate(wav_info[1])
                    read_flag1=0
                    read_flag2=1

                elif read_flag2==1:
                    ret = player.play()
                    if ret==0:
                        read_flag2=0
                        read_init_flag2=0
                        del player
                        gc.collect()


            if current_key_state1 == 0 and last_key_state1 == 1:
                if flag==0:
                    read_flag0=0
                    read_flag2=0
                    read_init_flag0=0
                    read_init_flag1=0
                    read_init_flag2=1
                elif flag==-1:
                    cry_num=0
                    read_flag0=0
                    read_flag2=0
                    read_init_flag0=0
                    read_init_flag1=1
                    read_init_flag2=0
                elif flag==-2:
                    key_chosen_flag=True
                    if pinyin_res_count==0:
                        if key_chosen<=1:
                            key_chosen=key_chosen+20
                        elif key_chosen<=8:
                            key_chosen=key_chosen+19
                        elif key_chosen<=10:
                            key_chosen=28
                        elif key_chosen<=20:
                            key_chosen=key_chosen-10
                        elif key_chosen<=28:
                            key_chosen=key_chosen-10
                    else:
                        if key_chosen==-1:
                            key_chosen=max([-(pinyin_res_count),-5])
                        elif key_chosen==-6:
                            key_chosen=max([-(pinyin_res_count),-10])
                        elif key_chosen<0:
                            key_chosen=key_chosen+1
                        elif key_chosen<=10:
                            key_chosen=-1
                        elif key_chosen<=20:
                            key_chosen=key_chosen-10
                        elif key_chosen<=28:
                            key_chosen=key_chosen-10

            if current_key_state4 == 0 and last_key_state4 == 1:
                if flag==0:
                    cry_num=0
                    read_flag0=0
                    read_flag1=0
                    read_flag2=0
                    read_init_flag0=0
                    read_init_flag1=0
                    read_init_flag2=0

                    form_flag=1

                elif flag==1:
                    cry_num=0
                    read_flag0=0
                    read_flag1=0
                    read_flag2=0
                    read_init_flag0=0
                    read_init_flag1=0
                    read_init_flag2=0

                elif flag==-2:
                    key_chosen_flag=True
                    if pinyin_res_count==0:
                        if key_chosen<=10:
                            key_chosen=key_chosen+10
                        elif key_chosen<=17:
                            key_chosen=key_chosen+10
                        elif key_chosen<=20:
                            key_chosen=28
                        elif key_chosen<=21:
                            key_chosen=1
                        elif key_chosen<=28:
                            key_chosen=key_chosen-20
                    else:
                        if key_chosen==max([-(pinyin_res_count),-5]):
                            key_chosen=1
                        elif key_chosen==max([-(pinyin_res_count),-10]):
                            key_chosen=1
                        elif key_chosen<0:
                            key_chosen=key_chosen-1
                        elif key_chosen<=10:
                            key_chosen=key_chosen+10
                        elif key_chosen<=17:
                            key_chosen=key_chosen+10
                        elif key_chosen<=20:
                            key_chosen=28
                        elif key_chosen<=28:
                            key_chosen=-1

            if current_key_state2 == 0 and last_key_state2 == 1:
                if flag==-1:
                    chosen_color=0
                    menu_collect=1
                elif flag==0:
                    cry_num=0
                    change_flag1=1
                    read_flag0=0
                    read_flag1=0
                    read_flag2=0
                    read_init_flag0=0
                    read_init_flag1=0
                    read_init_flag2=0
                elif flag==1:
                    pass
                elif flag==-2:
                    key_chosen_flag=True
                    if pinyin_res_count==0:
                        if key_chosen==1:
                            key_chosen=10
                        elif key_chosen==11:
                            key_chosen=20
                        elif key_chosen==21:
                            key_chosen=28
                        else:
                            key_chosen=key_chosen-1
                    else:
                        if key_chosen<=-6:
                            key_chosen+=5
                        elif key_chosen==1:
                            key_chosen=10
                        elif key_chosen==11:
                            key_chosen=20
                        elif key_chosen==21:
                            key_chosen=28
                        else:
                            key_chosen=key_chosen-1

            if current_key_state3 == 0 and last_key_state3 == 1:
                if flag==-1:
                    chosen_color=0
                    menu_collect=2

                elif flag==0:
                    cry_num=0
                    change_flag2=1
                    read_flag0=0
                    read_flag1=0
                    read_flag2=0
                    read_init_flag0=0
                    read_init_flag1=0
                    read_init_flag2=0
                elif flag==1:
                    pass
                elif flag==-2:
                    key_chosen_flag=True
                    if pinyin_res_count==0:
                        if key_chosen==10:
                            key_chosen=1
                        elif key_chosen==20:
                            key_chosen=11
                        elif key_chosen==28:
                            key_chosen=21
                        else:
                            key_chosen=key_chosen+1
                    else:
                        if key_chosen<0 and key_chosen>=-5:
                            key_chosen=max([-pinyin_res_count,key_chosen-5])
                        elif key_chosen==10:
                            key_chosen=1
                        elif key_chosen==20:
                            key_chosen=11
                        elif key_chosen==28:
                            key_chosen=21
                        else:
                            key_chosen=key_chosen+1

            last_key_state = current_key_state
            last_key_state1 = current_key_state1
            last_key_state4 = current_key_state4
            last_key_state2 = current_key_state2
            last_key_state3 = current_key_state3
            last_boot_state = current_boot_state


    except Exception as e:
        raise e
    #finally:
        #if not task is None:
            #kpu.deinit(task)


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        sys.print_exception(e)
        #lcd_show_except(e)
    finally:
        gc.collect()
